Q1. Write a program to find all pairs of an integer array whose sum is equal to a given number?

Q2. Write a program to reverse an array in place? In place means you cannot create a new array. You have to update the original array.

Q3. Write a program to check if two strings are a rotation of each other?

Q4. Write a program to print the first non-repeated character from a string?

Q5. Read about the Tower of Hanoi algorithm. Write a program to implement it.

Q6. Read about infix, prefix, and postfix expressions. Write a program to convert postfix to prefix expression.

Q7. Write a program to convert prefix expression to infix expression.

Q8. Write a program to check if all the brackets are closed in a given code snippet.

Q9. Write a program to reverse a stack.

Q10. Write a program to find the smallest number using a stack.
----------------------------------------------------------------------------------------------------------

ans1.

k=[]
p=[]
u=int(input("Enter the times of number of number want to enter")) 
er=int(input("Enter the number (sum) want find all the pairs"))
for i in range(u):
    k.append(int(input("enter the number->")))
print(k)
for j in range(u):
    for t in range(j+1,u):
        if (k[j]+k[t])==er:
            p.append(tuple((k[j],k[t])))
if len(p)==0:
    print("No pair found in an array")
else:
    print("pair-",p)
-----------------------------------------------------------------
ans2.

ele=int(input("Enter the number elements want to enter"))
lo=[]
for i in range(ele):
    lo.append(int(input("Enter the elements")))
print("Array= ",lo)
for j in range(int(ele/2)):
    lo[j],lo[(len(lo)-j-1)]=lo[(len(lo)-j-1)],lo[j]
    
print("Reverse array-",lo)

------------------------------------------------------------------
ans3

st1=input("Enter the string-")
st2=input("Enter the test string-")
d1=[]
d2=[]
for j in st1:
    d1.append(j)
for h in st2:
    d2.append(h)

l=0

for i in range(len(d1)):
    if d1==d2:
        print(f"test string-{'st2'}', is rotational to string 1-{'st1'}")
        break
    else:
        k= d1[0]
        d1.pop(0)
        d1.append(k)
        l+=1
if l==len(d1):
    print(f"test string-{'st2'}, is not rotational to string 1-{'st1'}")
        
    
    
    
--------------------------------------------------------------------------

ans4

k=input("Enter the string")
p=[]
h={}
for i in k:
    if i in h:
        h[i]+=1
    else:
        h[i]=1
        p.append(i)
if len(p)==0:
    print("All the letters are repeating")
else:
    for j in p:
        if h[j]==1:
            print("The non repeating  first letter in string -",j)
            break

-----------------------------------------------------------------------
ans5

def TowerOfHanoi(n , source, destination, auxiliary):
    if n==1:
        print ("Move disk 1 from source",source,"to destination",destination)
        return
    TowerOfHanoi(n-1, source, auxiliary, destination)
    print ("Move disk",n,"from source",source,"to destination",destination)
    TowerOfHanoi(n-1, auxiliary, destination, source)
         

n=int(input("Enter the number of disks"))
so=input("Enter the source rod in form of single alphabet ")
au=input("Enter the auxilary rod in form of single alphabet")
de=input("Enter the destination rod in form of single alphabet")
TowerOfHanoi(n,so,de,au)
-----------------------------------------------------------------------------------

ans6.

def isOperator(x):
    if x == "+":
        return True
    if x == "-":
        return True
    if x == "/":
        return True
    if x == "*":
        return True
    return False
 
def postToPre(post_exp):
    s = []
    length = len(post_exp)
    for i in range(length):
        if (isOperator(post_exp[i])):
            op1 = s[-1]
            s.pop()
            op2 = s[-1]
            s.pop()
            temp = post_exp[i] + op2 + op1
            s.append(temp)
        else:
            s.append(post_exp[i])
    ans = ""
    for i in s:
        ans += i
    return ans
 
post_exp=input("Enter the post prefix: ")
print("Prefix : ", postToPre(post_exp))
 
----------------------------------------------------------

ans7

def isOperator(c):
    if c == "*" or c == "+" or c == "-" or c == "/" or c == "^" or c == "(" or c == ")":
        return True
    else:
        return False

def prefixToInfix(prefix):
    stack = []
    i = len(prefix) - 1
    while i >= 0:
        if not isOperator(prefix[i]):
            stack.append(prefix[i])
            i -= 1
        else:
            str = "(" + stack.pop() + prefix[i] + stack.pop() + ")"
            stack.append(str)
            i -= 1
    return stack.pop()
 
str=input("Enter the prfix string")
print(prefixToInfix(str))
------------------------------------------------------------

ans8

def are_bracket_balnce(expr):
    stack = []
    for char in expr:
        if char in ["(", "{", "["]:
            stack.append(char)
        else:
            if not stack:
                return False
            current_char = stack.pop()
            if current_char == '(':
                if char != ")":
                    return False
            if current_char == '{':
                if char != "}":
                    return False
            if current_char == '[':
                if char != "]":
                    return False
    if stack:
        return False
    return True

expr =input("Enter the expression : ")
if are_bracket_balnce(expr):
    print("Balanced")
else:
    print("Not Balanced")
-------------------------------------------------------------

ans9

class Stack:
    def __init__(self):
        self.items = []
 
    def is_empty(self):
        return self.items == []
 
    def push(self, data):
        self.items.append(data)
 
    def pop(self):
        return self.items.pop()
 
    def display(self):
        for data in reversed(self.items):
            print(data)
            
def insert_at_bottom(s, data):
    if s.is_empty():
        s.push(data)
    else:
        popped = s.pop()
        insert_at_bottom(s, data)
        s.push(popped)
 
 
def reverse_stack(s):
    if not s.is_empty():
        popped = s.pop()
        reverse_stack(s)
        insert_at_bottom(s, popped)
 
 

s = Stack()
data_list = input('Please enter the elements to push: ').split()
for data in data_list:
    s.push(int(data))
print('The stack:')
s.display()
reverse_stack(s)
print('After reversing:')
s.display()

--------------------------------------------------------------

ans10

class stack:
    def __init__(self,limit):
        self.limit=limit
        self.list_elm=[]
    
    def push(self,number):
        if len(self.list_elm)<self.limit:
            self.list_elm.append(number)
        else:
            print("stack is over flow")
    def pull(self):
        if len(self.list_elm)>0:
            del self.list_elm[-1] # or self.list_el.pop()
        else:
            print("Stack is empty")
    def show(self):
        print("-----------stack-------")
        for i in self.list_elm:
            print(i, end=" ")
    def peek(self):
        if len(self.list_elm)>0:
            return self.list_elm[-1]                  # print("last element in stack-",self.list_elm[-1])
        else:
            print("stack is empty")
            
    def isfull(self):
        if len(self.list_elm)==self.limit:
            print("stack is full")
        else:
            print("stack is not full")
            
    def isempty(self):
        if len(self.list_elm)==0:
            return True            #print("stack is empty")
        else:
            return False             #("not empty")
    
    def getmin(self):
        list_el2=[]
        if len(self.list_elm)!=0:
            list_el2.append(self.list_elm[-1])
            if len(self.list_elm)!=0:
                for j in range(len(self.list_elm)-1,0,-1):
                    if self.list_elm[j]< list_el2[-1]:
                        list_el2.append(self.list_elm[j])
                    else:
                        continue
                print("The smallest number in stack is :",list_el2[-1])
            else:
                print("The smallest number in stack is :",list_el2[-1])
        else:
            print("The stack is empty")
            
            
                
--------------------------------------------------------------------------------------